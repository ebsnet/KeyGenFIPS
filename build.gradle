buildscript {
  repositories {
    mavenCentral()
  }
}

// gradle plugins
plugins {
  id 'application'
  // auto format source files
  id 'com.diffplug.spotless' version '7.0.4'
  // analyze code and find potential bugs
  id 'pmd'
  id 'com.github.spotbugs' version '6.2.1'
  // test coverage report
  id 'jacoco'
  // maven plugin to upload to repository
  id 'maven-publish'
  // some lints for dependencies
  id 'nebula.lint' version '20.6.2'
  // resolve git branch name
  id 'org.ajoberstar.grgit' version '5.3.2'
}

group = 'de.ebsnet'
// version must be set _before_ applying helper.gradle
version = '1.1.0'

dependencyLocking {
  lockAllConfigurations()
}

spotless {
  java {
    googleJavaFormat('1.24.0')
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint',
    '-g'
  ]
  // make build tasks depend on the formatter task
  // automatically format the code when building
  dependsOn 'spotlessApply'
}

tasks.withType(Javadoc).configureEach {
  options.encoding = 'UTF-8'
}

java {
  // use Java 11
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

// dependency lints
gradleLint {
  // run all lints and print warnings
  rules = ['all-dependency']
  // fail the build if unused dependencies are defined
  criticalRules = ['unused-dependency']

  // do not run linter when the build fails
  // TODO: not compatible with Gradle > 7.6
  // gradleLint.autoLintAfterFailure = false

  // do not run linter on task publish
  skipForTask('publish')
  // skip linter on IntelliJ init task
  skipForTask('prepareKotlinBuildScriptModel')
  skipForTask('ijDownloadSources')
  // dependabot breaks sometimes...
  skipForTask(':ForceDependencyResolutionPlugin_resolveAllDependencies')
}

// remote repositories for 3rd party dependencies
repositories {
  mavenCentral()
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    html.required = true
    xml.required = true
  }
}

spotbugs {
  excludeFilter = file('config/spotbugs/exclude.xml')
}

tasks.withType(Pmd) {
  reports {
    html.required = true
  }
}

pmd {
  ruleSetFiles = files('config/pmd/pmd-all-java.xml')
  // this is needed for exclude patterns to work
  // this resets the default rulesets that are set by the gradle plugin itself
  ruleSets = []
}

def versions = [
  bc: '1.77',
]

dependencies {
  // implementation "org.bouncycastle:bcpkix-jdk18on:${versions.bc}"
  // implementation "org.bouncycastle:bcutil-jdk18on:${versions.bc}"
  // implementation "org.bouncycastle:bcprov-jdk18on:${versions.bc}"

 implementation 'org.bouncycastle:bc-fips:2.1.0'
 implementation 'org.bouncycastle:bcpkix-fips:2.1.9'

  implementation 'info.picocli:picocli:4.7.7'

  // additional spotbugs detectors
  spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0'
  // TODO activate and fix warnings
  // spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'// EXPERIMENTAL
  // provides annotations to suppress spotbugs warnings
//  implementation "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
}

def latestCommitHash = grgit.head().abbreviatedId

// write application version to version property file
import org.apache.tools.ant.filters.*
processResources {
  filter ReplaceTokens, tokens: [
    "version": project.property("version"),
    "commit": latestCommitHash
  ]
}

// MANIFEST.mf properties
jar {
  manifest {
    attributes 'Name': project.name
    attributes 'Implementation-Version': latestCommitHash
    attributes 'Implementation-Vendor': 'EBSnet GmbH'
    attributes 'Specification-Version': archiveVersion
    attributes 'Specification-Vendor': 'EBSnet GmbH'
    attributes 'Main-Class': 'de.ebsnet.keygen.KeyGen'
  }
}

test {
  finalizedBy jacocoTestReport
}

application {
  // Define the main class for the application.
  mainClass = 'de.ebsnet.keygen.KeyGen'
}

distributions {
  main {
    contents {
      from 'LICENSE'
    }
  }
}

void prepare() {
  if (System.env['CI_JOB_ID'] == null) {
    String[] hooks = ['pre-commit', 'post-commit']
    hooks.findAll {
      !(new File(rootProject.rootDir, '.git/hooks/' + it).exists())
    }.each {
      println 'Linking ' + it
      java.nio.file.Files.createSymbolicLink(
        new File(rootProject.rootDir, '.git/hooks/' + it).toPath(),
        new File(rootProject.rootDir, 'hooks/' + it).toPath()
      )
    }
  }
}
// prepare()
// vim: set filetype=groovy ts=2 sw=2 tw=120 et :
