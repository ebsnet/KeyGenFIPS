#!/usr/bin/env bash

# stop execution once a command returns a non-zero exit code
set -e

main() {
    # check if any Java sources were changed _and_ added
    # the output of `git status --porcelain=v1` looks like this:
    # if changed but not added (notice the leading space):
    #   ' M <filename>'
    # if changed and added (notice two spaces between `M` and filename:
    #   'M  <filename>'
    # if changed, added and changed again (file in staging is different from
    # file on disk):
    #   'MM <filename>'
    # if a new file is added:
    #   '?? <filename>'
    # if a file is newly staged:
    #   'A  <filename>'
    # if a file is partially staged (e.g. using `git add --patch`):
    #   'MM <filename>'
    #   'AM <filename>'

    # run only, if files in the `src/` directory are in the staging area
    if git status --porcelain=v1 | grep -q '^[M|\?]. src/'
    then
        local staging_files
        local fully_staging
        # all files in staging area
        staging_files=$(git status --porcelain=v1 | grep '^[M|A]. src/' | awk '{ print $2 }')
        # only fully staged files. We exclude files that have unstaged modifications, e.g. by modifying after being
        # added or by being added using `git add --patch`
        fully_staging=$(git status --porcelain=v1 | grep '^[M|A][^M] src/' | awk '{ print $2 }')

        # the include filter takes a comma separated list if files. `paste -sd ','` joins the list
        # this formats all staged files (even the partially staged ones)
        ./gradlew spotlessApply -DspotlessFiles="$(echo "$staging_files" | paste -sd ',')"

        # fully staged files are added again, in case they were formatted. Partially staged files are left out since
        # this might result in unwanted data being added to the commit.
        for file in $fully_staging
        do
            git add "$file"
        done
    fi
}

main
